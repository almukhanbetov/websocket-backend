package main

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	"github.com/joho/godotenv"
)

var clients = make(map[*websocket.Conn]bool)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		// ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª—é–±–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ (—É–¥–æ–±–Ω–æ –¥–ª—è dev)
		return true
	},
}

func handleWS(c *gin.Context) {
	log.Println("‚û°Ô∏è WebSocket –∑–∞–ø—Ä–æ—Å...")

	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞:", err)
		return
	}
	defer conn.Close()

	clients[conn] = true
	log.Println("üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω:", conn.RemoteAddr())

	// –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤—ã–º ‚Äî —á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	for {
		_, _, err := conn.ReadMessage()
		if err != nil {
			log.Println("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω:", err)
			delete(clients, conn)
			break
		}
	}
}

func broadcastLoop() {
	for {
		time.Sleep(10 * time.Second)

		message := []map[string]interface{}{
			{
				"type": "EV",
				"NA":   "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á",
				"CT":   "–õ–∏–≥–∞ –æ—Ç–ª–∞–¥–∫–∏",
				"ID":   time.Now().Format("15:04:05"),
			},
		}

		for conn := range clients {
			err := conn.WriteJSON(message)
			if err != nil {
				log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
				conn.Close()
				delete(clients, conn)
			} else {
				log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É: %v", conn.RemoteAddr())
			}
		}
	}
}

func pingLoop() {
	for {
		time.Sleep(15 * time.Second)
		for conn := range clients {
			err := conn.WriteMessage(websocket.TextMessage, []byte(`{"type":"ping","ts":"`+time.Now().Format("15:04:05")+`"}`))
			if err != nil {
				log.Println("‚ùå Ping –Ω–µ –ø—Ä–æ—à—ë–ª:", err)
				conn.Close()
				delete(clients, conn)
			}
		}
	}
}
func pollBookiesAPI() {
	url := os.Getenv("BOOKIES_API_URL")
	if url == "" {
		log.Fatal("‚ùå BOOKIES_API_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
	}

	interval, _ := strconv.Atoi(os.Getenv("POLL_INTERVAL_SECONDS"))
	if interval == 0 {
		interval = 5
	}

	for {
		time.Sleep(time.Duration(interval) * time.Second)

		resp, err := http.Get(url)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: %v", err)
			continue
		}
		body, err := io.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API: %v", err)
			continue
		}

		var raw map[string]interface{}
		if err := json.Unmarshal(body, &raw); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
			continue
		}

		success, ok := raw["success"].(float64)
		if !ok || success != 1 {
			log.Println("‚ö†Ô∏è –û—Ç–≤–µ—Ç API: success != 1")
			continue
		}

		// üéØ –†–∞–∑–±–æ—Ä —Å–æ–±—ã—Ç–∏–π
		results, ok := raw["results"].([]interface{})
		if !ok || len(results) == 0 {
			log.Println("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
			continue
		}

		events, ok := results[0].([]interface{})
		if !ok {
			log.Println("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π –Ω–µ []interface{}")
			continue
		}

		clean := make([]map[string]interface{}, 0)

		for _, ev := range events {
			evMap, ok := ev.(map[string]interface{})
			if !ok {
				continue
			}

			if t, ok := evMap["type"].(string); !ok || t != "EV" {
				continue
			}

			if _, ok := evMap["NA"]; !ok {
				continue
			}

			clean = append(clean, evMap)
			log.Printf("‚úÖ –ú–∞—Ç—á: %s [%s]", evMap["NA"], evMap["ID"])
		}

		log.Printf("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: %d", len(clean))
		broadcastJSON(clean)
	}
}
func broadcastJSON(data interface{}) {
	for conn := range clients {
		err := conn.WriteJSON(data)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É:", err)
			conn.Close()
			delete(clients, conn)
		} else {
			log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É: %v", conn.RemoteAddr())
		}
	}
}
func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
	}
	go pollBookiesAPI()
	go pingLoop()
	
	router := gin.Default()
	router.GET("/ws", handleWS)

	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç :8083")
	if err := router.Run(":8083"); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}
